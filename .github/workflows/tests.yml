name: Scraping Tests CI

on:
  push:
    branches: [ main, develop, 'feature/**', 'fix/**', 'bugfix/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前2時（JST 11時）にスクレイピングテスト実行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'テストの種類を選択'
        required: true
        default: 'unit'
        type: choice
        options:
        - unit
        - integration
        - scraping
        - all

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_loanpedia
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Setup test database
        run: |
          # app_dbデータベースを作成し、test_userに権限を付与
          mysql -h127.0.0.1 -P3306 -uroot -ptest_password -e "CREATE DATABASE IF NOT EXISTS app_db;"
          mysql -h127.0.0.1 -P3306 -uroot -ptest_password -e "GRANT ALL PRIVILEGES ON app_db.* TO 'test_user'@'%';"
          mysql -h127.0.0.1 -P3306 -uroot -ptest_password -e "FLUSH PRIVILEGES;"
          # テーブル作成実行
          mysql -h127.0.0.1 -P3306 -utest_user -ptest_password app_db < loanpedia_scraper/database/create_tables.sql
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_loanpedia

      - name: Lint and type check
        run: |
          uv run mypy loanpedia_scraper/

      - name: Run unit tests
        if: ${{ github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
        run: |
          uv run pytest tests/unit/ -v --cov=loanpedia_scraper --cov-report=xml --cov-report=term-missing
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_loanpedia

      - name: Run integration tests
        if: ${{ github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
        run: |
          uv run pytest tests/integration/ -v
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_loanpedia

      - name: Run scraping tests
        if: ${{ github.event.inputs.test_type == 'scraping' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule' }}
        run: |
          uv run pytest tests/scraping/ -v --timeout=300
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_loanpedia
          # スクレイピングテスト用の追加環境変数
          SCRAPING_TEST_MODE: "true"
          SCRAPING_DELAY: "2"

      - name: Upload coverage reports
        if: ${{ github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
      - name: Security scan
        run: |
          uv sync --frozen
          uv run pip-audit

  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        
      - name: Build with SAM
        run: |
          sam build --use-container

